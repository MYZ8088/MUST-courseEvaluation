name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 缓存Maven依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 运行后端测试
      working-directory: ./course-evaluation-system/backend
      env:
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USERNAME: test_user
        DATABASE_PASSWORD: test_password
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        MAIL_HOST: smtp.qq.com
        MAIL_PORT: 587
        MAIL_USERNAME: test@example.com
        MAIL_PASSWORD: test_password
      run: |
        mvn clean test
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: course-evaluation-system/frontend/package-lock.json
    
    - name: 安装前端依赖
      working-directory: ./course-evaluation-system/frontend
      run: npm ci
    
    - name: 运行前端测试
      working-directory: ./course-evaluation-system/frontend
      run: npm run test:unit || echo "前端测试跳过（如果没有配置测试）"
    
    - name: 构建前端
      working-directory: ./course-evaluation-system/frontend
      run: npm run build

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 设置Java环境
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    
    - name: 缓存Maven依赖
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: 构建后端应用
      working-directory: ./course-evaluation-system/backend
      run: |
        mvn clean package -DskipTests
    
    - name: 设置Node.js环境
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: course-evaluation-system/frontend/package-lock.json
    
    - name: 构建前端应用
      working-directory: ./course-evaluation-system/frontend
      run: |
        npm ci
        npm run build
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          course-evaluation-system/backend/target/*.jar
          course-evaluation-system/frontend/dist/
        retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 下载构建产物
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: 部署到生产环境
      run: |
        echo "部署到生产环境的步骤"
        echo "这里可以添加具体的部署脚本，如："
        echo "- 部署到云服务器"
        echo "- 部署到Docker容器"
        echo "- 部署到Kubernetes"
        echo "- 部署到静态网站托管服务"
        
        # 示例：部署到服务器
        # scp target/*.jar user@server:/path/to/deploy/
        # ssh user@server 'systemctl restart course-evaluation'
        
        # 示例：构建Docker镜像
        # docker build -t course-evaluation:${{ github.sha }} .
        # docker push your-registry/course-evaluation:${{ github.sha }} 